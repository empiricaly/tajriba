"""
EventType holds types of event that can trigger hooks.
"""
enum EventType {
  "A step was added."
  STEP_ADD

  "A scope was added."
  SCOPE_ADD

  "A group was added."
  GROUP_ADD

  "A transition was added."
  TRANSITION_ADD

  "A link was added."
  LINK_ADD

  "An attribute was added or updated."
  ATTRIBUTE_UPDATE

  "A participant was added."
  PARTICIPANT_ADD

  "A participant connected."
  PARTICIPANT_CONNECT

  "A participant disconnected."
  PARTICIPANT_DISCONNECT

  """
  Participant was already connected when this subscription started. This is a
  special event that allows the listener to catch up on the currently connected
  players at the beginning of the subscription.
  """
  PARTICIPANT_CONNECTED
}

"OnEventInput is the input for the onEvent subscription."
input OnEventInput {
  "eventsTypes speficies which events to listen to."
  eventTypes: [EventType!]!

  """
  nodeID is an optional node ID of the node to listen to.
  """
  nodeID: ID
}

"OnAnyEventInput is the input for the onAnyEvent subscription."
input OnAnyEventInput {
  """
  nodeID is an optional node ID of the node to listen to.
  """
  nodeID: ID
}

"OnEventPayload is the payload for the on[Any]Event subscriptions."
type OnEventPayload {
  """
  eventID is a unique identifier for the current event. Each OnEventPayload for
  a single client will have a different eventID. eventID will be the same for
  different clients on the same event.
  """
  eventID: ID!

  "eventType is the type of the current event."
  eventType: EventType!

  "node is the node that triggered the event"
  node: Node

  """
  done indicates that the state has finished synchorizing. This is only valid
  for events that synchronize state on start of subscription (e.g.
  PARTICIPANT_CONNECTED).
  """
  done: Boolean!
}

extend type Subscription {
  """
  onEvent attaches hooks to specified events. Optionally, a nodeType and nodeID
  can be specified to only look at events for a particular record.
  """
  onEvent(input: OnEventInput): OnEventPayload @hasRole(role: ADMIN)

  "onAnyEvent works like onEvent, except all events are subscribed to."
  onAnyEvent(input: OnAnyEventInput): OnEventPayload @hasRole(role: ADMIN)
}
